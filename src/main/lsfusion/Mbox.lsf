MODULE Mbox;

REQUIRE Folder;

NAMESPACE Observer;

CLASS Mbox 'MBOX files';
TABLE mbox(Mbox);

account 'Folder' = DATA Account (Mbox);
email 'Folder' (Mbox m) = email(account(m)) CHARWIDTH 30;

filename 'File Name' = DATA STRING (Mbox) CHARWIDTH 30;
path 'Storage containing the MBOX File' = DATA STRING (Mbox);
filelink 'Link to MBOX File' (Mbox v) = CONCAT '/', path(v), filename(v) MATERIALIZED CHARWIDTH 100; // pathbuilder hardcoded for linux servers

// Filename parsing at upload
filenameExt 'Extension at upload' = DATA STRING (Mbox) CHARWIDTH 5;
filenameArch 'File Name after import' = DATA STRING (Mbox) CHARWIDTH 50;
filelinkOut 'File Name without extension' (Mbox v) = CONCAT '/', archPath(), filenameArch(v) CHARWIDTH 100;

// Flags for MBOX importing sequencing
toImport 'Need to be imported from MBOX format' = DATA BOOLEAN (Mbox);
isImported 'Imported from MBOX format' = DATA BOOLEAN (Mbox);
wrongFormat 'Wrong file format' = DATA BOOLEAN (Mbox);

// Counters
length 'Number of lines' = DATA LONG (Mbox);
messages 'Number of messages' = DATA INTEGER (Mbox);
progress 'Imported lines' = DATA LONG (Mbox);

// Aggregating flag
numberToImport 'MBOX archives at import' = GROUP SUM 1 IF toImport(Mbox v) AND NOT isImported(v);

// Keep MBOX record, if was not able to delete file from server
isHidden 'Keep files until removal from storage' = DATA BOOLEAN (Mbox);

// Uniqueness check for the MBOX archives by its filenames
mbox = GROUP AGGR Mbox v BY filename(v);

// Import Log
CLASS MboxLog 'Log of MBOX files import';
TABLE mboxlog(MboxLog);

mbox 'Mbox file' = DATA Mbox (MboxLog);
email 'Account' (MboxLog l) = email(mbox(l));
filname 'Filename' (MboxLog l) = filename(mbox(l));
length 'Lines in source' (MboxLog l) = length(mbox(l));
messages 'Messages in source' (MboxLog l) = messages(mbox(l));
start 'Date/Time Start' = DATA DATETIME (MboxLog);
finish 'Date/Time Finish' = DATA DATETIME (MboxLog);
result 'Result' = DATA STRING[10] (MboxLog);
output 'Output of the run' = DATA TEXT (MboxLog);
lines 'Lines read' = DATA LONG (MboxLog);
added 'Messages added' = DATA INTEGER (MboxLog);

// Actions
WHEN SET (isImported(Mbox v)) DO {
    toImport(v) <- NULL;
}

// Files upload
checkManual 'Check for new manually uploaded files' () {
    TRY {
        checkDirectory(path(Storage.import));
        NEWSESSION {
            LOCAL counter = INTEGER();
            LOCAL counterImport = INTEGER();
            LOCAL absolutePath = STRING();
            LOCAL targetExtension = STRING();
            LOCAL filenameWithoutExtension = STRING();
            counter() <- 0;
            counterImport() <- 0;
            
            targetExtension() <- '.mbox';
            
            listFiles(manualPath());
            FOR fileName(INTEGER r) AND NOT mbox(fileName(r)) AND NOT fileIsDirectory(r) NEW v = Mbox DO {
                filename(v) <- fileName(r);
                // Regular Expressions in LSFusion require masking of the symbol \
                filenameWithoutExtension() <- regexpReplace(filename(v),'\\.[^\\.]*$','','');
                // Extract extension of the uploaded file
                filenameExt(v) <- replace(filename(v),filenameWithoutExtension(),'');
                IF filenameExt(v) != targetExtension() THEN {
                    path(v) <- archPath();
                    wrongFormat(v) <- TRUE;
                }
                ELSE {
                    path(v) <- importPath();
                    filenameArch(v) <- filenameWithoutExtension() + targetExtension();
                    toImport(v) <- TRUE;
                    counterImport() <- counterImport() + 1;
                }
                move((CONCAT '/', manualPath(), filename(v)), filelink(v));
                counter() <- counter() + 1;
            }
            IF counter() > 0 THEN
                MESSAGE 'Successfully added ' + counter() + ' new files.\nFiles to be converted: ' + counterImport() + ' put into queue.';
            ELSE 
                MESSAGE 'No new manualy uploaded files found';
            APPLY;
        }
    }
    CATCH {
        MESSAGE 'Cannot read the storage for manualy uploaded files:\n' + messageCaughtException();
    }
}

deleteFile 'Delete file' (Mbox v) {
    NEWSESSION {
        isHidden(v) <- TRUE;
        TRY {
            delete(filelink(v));
            DELETE (v);
        }
        CATCH {
            MESSAGE 'Cannot delete file\n' + filelink(v) + '\nfrom the server:\n' + messageCaughtException();
        }
        APPLY;
    }
} CHARWIDTH 12;

uploadFile 'Upload a new MBOX file' () {
    // ToDo Upload MBOX via GUI
}

// Forms

EXTEND FORM folder
    OBJECTS v = Mbox
    PROPERTIES email(v)
    PROPERTIES (v) READONLY filename, toImport, isImported, wrongFormat, length, progress, isHidden
    PROPERTIES TOOLBAR DRAW v checkManual(), deleteFile(v) GRID SHOWIF showDelete() // not implemented: uploadFile(), 
    FILTERGROUP mboxs
        FILTER 'Show files in MBOX format only' NOT wrongFormat(v) DEFAULT
;

DESIGN folder { pane {
    NEW mbox {
        type = CONTAINERV;
        alignment = STRETCH;
        fill = 1;
        MOVE BOX (v) {alignment = STRETCH; fill = 1; }
    }
} }

EXTEND FORM folders
    OBJECTS v = Mbox
    PROPERTIES (v) READONLY filename, length, progress
    FILTERS account(v) == a AND NOT isHidden(v)
    ORDERS filename(v)
;

DESIGN folders {
    NEW pane FIRST {
        type = CONTAINERH;
        fill = 1;
        alignment = STRETCH;
        NEW accounts {
            type = CONTAINERV;
            alignment = STRETCH;
            width = 500;
            NEW folder {
                type = CONTAINERV;
                alignment = STRETCH;
                height = 300;
                MOVE BOX (p);
            }
            MOVE BOX (a);
            MOVE BOX (v) {
                GRID(v) { autoSize = TRUE; }
                flex = 0;
            }
        }
    }
}
