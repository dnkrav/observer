MODULE Runner;

REQUIRE Itemail;

NAMESPACE Observer;

// Import data from MBOX format
mboxImporter 'Import data from MBOX archive' INTERNAL 'lsfusion.solutions.observer.MboxImporter' (Mbox);

// Read MIME Headers
headerReader 'Read MIME Headers' INTERNAL 'lsfusion.solutions.observer.HeaderReader' (Itemail);

importNextFile 'Import from next MBOX archive' () {
    LOCAL nextFile = Mbox(); 
    nextFile() <- GROUP LAST Mbox v IF toImport(v) AND NOT isImported(v) ORDER filename(v);
    
    IF NOT nextFile() THEN RETURN;
    
    IF NOT filelink(nextFile()) OR NOT filelinkOut(nextFile()) THEN {
        printToLog('Cannot import from MBOX archive, because some of links empty: ' + (OVERRIDE filelink(nextFile()),filelinkOut(nextFile()),filename(nextFile()),'unknown'));
        toImport(nextFile()) <- NULL;
        RETURN;
    }
    
    IF isBlocked() THEN {
        printToLog('Import is blocked by another process');
        RETURN;
    }

    NEWSESSION { 
        lastImporterResult() <- 'Stop';
        lastImporterOutput() <- NULL;
        isBlocked() <- TRUE; 
        APPLY; 
    }
    
    printToLog('Start importing from MBOX archive: ' + filelink(nextFile()));
    fileExists(filelink(nextFile()));
    IF NOT fileExists() THEN {
        lastImporterOutput() <- 'Import was not started, because the next file does not exist ' + filelink(nextFile());
        printToLog(lastImporterOutput());
        isBlocked() <- NULL;
        APPLY;
        RETURN;
    }
    
    // Main Run with logging
    FOR Mbox m AND m == nextFile() NEW l = MboxLog DO {
        mbox(l) <- m;
        start(l) <- currentDateTime();
        
        LOCAL initialBytes = INTEGER ();
        LOCAL initialLines = INTEGER ();
        LOCAL initialImported = INTEGER ();
        LOCAL initialRead = INTEGER ();
        initialBytes() <- OVERRIDE bytes(m), 0;
        initialLines() <- OVERRIDE progress(m), 0;
        initialImported() <- OVERRIDE imported(m), 0; 
        initialRead() <- OVERRIDE emails(m), 0; 
        output(l) <- 'Import initiated by: ' + (OVERRIDE name(currentUser()), 'System User');
        output(l) <- CONCAT '\n', output(l), 'Current progress: ' + initialLines() + ' lines read';
        TRY {
            mboxImporter(m);
        
            output(l) <- CONCAT '\n', output(l), (OVERRIDE lastImporterOutput(), '');
        }
        CATCH {
            // We are here in case of e.g. java.lang.OutOfMemoryError: Java heap space
            printToLog('Import Run ended with exception: ' + messageCaughtException());
            output(l) <- CONCAT '\n', output(l), (OVERRIDE messageCaughtException(), '');
        }
        
        result(l) <- lastImporterResult();
        bytes(l) <- OVERRIDE (bytes(m) - initialBytes()), bytes(m), 0;
        lines(l) <- OVERRIDE (progress(m) - initialLines()), progress(m), 0;
        added(l) <- OVERRIDE (imported(m) - initialImported()), imported(m), 0;
        imported(l) <- currentDateTime();
        
        // Populate Emails
        output(l) <- CONCAT '\n', output(l),
                    'Found ' + [GROUP SUM 1 IF NOT converted(Itemail item) BY mbox(item)](m) + ' Emails for parsing';
                    
        FOR Itemail item AND mbox(item) == m AND NOT converted(item) DO {
            NEWSESSION {
                TRY {
                    headerReader(item);
                }
                CATCH {
                    conversionError(item) <- messageCaughtException();
                    APPLY;
                }
            }
        }
        
        read(l) <- OVERRIDE (emails(m) - initialRead()), emails(m), 0;
        output(l) <- CONCAT '\n', output(l), (OVERRIDE 'Created ' + read(l) + ' new Emails', '');
        finish(l) <- currentDateTime();
    }
    
    
    printToLog('Stop importing from MBOX archive: ' + filelink(nextFile()));
    printToLog(lastImporterOutput());
    isBlocked() <- NULL;
    APPLY;
}

// Process monitor
FORM importer 'MBOX Import'
    OBJECTS m = Mbox
    PROPERTIES (m) filename READONLY, path READONLY, toImport, isImported, wrongFormat
    PROPERTIES (m) READONLY email, size, bytes, length, progress, imported, emails
    
    OBJECTS l = MboxLog
    PROPERTIES (l) READONLY start, imported, finish, result, email, filname, size, bytes, length, lines, added, read
    PROPERTIES (l) READONLY PANEL output
    
    PROPERTIES() PANEL isBlocked, importNextFile TOOLBAR DRAW m
    PROPERTIES() PANEL lastImporterRun, lastImporterResult, scrollOutput = lastImporterOutput
;

DESIGN importer { 
    NEW pane FIRST { 
        fill = 1;
        alignment = STRETCH;
        MOVE BOX (m);
        MOVE BOX (l);
        NEW details {
            type = CONTAINERH;
            alignment = STRETCH;
            height = 240;
            MOVE PROPERTY (output(l)) { alignment = STRETCH; fill = 1; panelCaptionVertical = TRUE; }
            NEW lastRun {
                caption = 'Last Importer Run';
                alignment = STRETCH;
                fill = 1;
                MOVE PROPERTY (isBlocked());
                MOVE PROPERTY (lastImporterRun()) { alignment = STRETCH; }
                MOVE PROPERTY (lastImporterResult()) { alignment = STRETCH; }
            }
        }
    }
}
@scrollBarView(importer, lastRun, scrollOutput, 'Output of the last run');

NAVIGATOR {
    NEW importer BEFORE masterData;
}

EXTEND FORM parameters 
    PROPERTIES () numberToImport, isBlocked, lastImporterResult
    PROPERTIES () READONLY lastImporterRun, lastImporterOutput
;
DESIGN parameters { pane { 
    NEW process {
        caption = 'Process monitor';
        MOVE PROPERTY (numberToImport()); 
        MOVE PROPERTY (isBlocked());
    }
    NEW lastRun {
        caption = 'Last Importer Run';
        alignment = STRETCH;
        MOVE PROPERTY (lastImporterRun()) { alignment = STRETCH; }
        MOVE PROPERTY (lastImporterResult()) { alignment = STRETCH; }
        MOVE PROPERTY (lastImporterOutput()) { fill = 1;}
    }
}}

EXTEND FORM folders
    PROPERTIES (m) SHOWIF NOT converted(m) TOOLBAR headerReader 
;
DESIGN folders { TOOLBAR(m) { MOVE PROPERTY (headerReader(m)) FIRST; }}

EXTEND FORM Email.mail
    PROPERTIES (e) deleteGrid = DELETE GRID 
;